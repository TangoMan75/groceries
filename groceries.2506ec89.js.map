{"mappings":"ACuBA,MAAM,MAKF,OAAO,KAAK,EAAS,CAAC,CAAC,CAAE,CAErB,OAAO,AADO,IAAI,QACL,IAAI,CAAC,EACtB,CAOA,KAAK,EAAS,CAAC,CAAC,CAAE,CACd,IAAM,EAAQ,CAAE,KAAM,KAAM,QAAS,IAAK,QAAS,KAAM,OAAQ,cAAK,EAChE,EAAgB,CAAE,KAAM,OAAQ,SAAU,QAAS,SAAU,GAAK,EAClE,EAAc,CAAE,GAAG,CAAa,CAAE,GAAG,CAAM,CAAO,GAAI,IAAI,CAAC,aAAa,EAAK,CAC/E,AAAgB,QAAhB,EAAO,IAAI,EAAW,CAAA,EAAY,IAAI,CAAG,EAAc,IAAI,AAAJ,EACvD,AAAoB,OAApB,EAAO,QAAQ,EAAW,CAAA,EAAY,QAAQ,CAAG,EAAc,QAAQ,AAAR,EAC/D,AAAoB,OAApB,EAAO,QAAQ,EAAW,CAAA,EAAY,QAAQ,CAAG,EAAc,QAAQ,AAAR,EACnE,EAAY,IAAI,CAAG,EAAY,QAAQ,CAAG,CAAC,aAAa,EAAE,EAAY,QAAQ,CAAC,SAAS,CAAC,CAAG,CAAK,CAAC,EAAY,IAAI,CAAC,EAAI,CAAK,CAAC,EAAc,IAAI,CAAC,CAChJ,EAAY,KAAK,CAAG,EAAY,KAAK,EAAI,EAAY,IAAI,CAAC,MAAM,CAAC,GAAG,WAAW,GAAK,EAAY,IAAI,CAAC,KAAK,CAAC,GAE3G,IAAI,EAAiB,SAAS,cAAc,CAAC,CAAC,gBAAgB,EAAE,EAAY,QAAQ,CAAA,CAAE,EACjF,IAED,AADA,CAAA,EAAiB,SAAS,aAAa,CAAC,MAAxC,EACe,EAAE,CAAG,CAAC,gBAAgB,EAAE,EAAY,QAAQ,CAAA,CAAE,CAC7D,EAAe,SAAS,CAAG,CAAC,gBAAgB,EAAE,EAAY,QAAQ,CAAA,CAAE,CACpE,SAAS,IAAI,CAAC,WAAW,CAAC,IAG9B,IAAM,EAAe,SAAS,aAAa,CAAC,OAC5C,EAAa,YAAY,CAAC,KAAM,EAAY,EAAE,EAC9C,EAAa,YAAY,CAAC,OAAQ,SAClC,EAAa,SAAS,CAAG,CAAA,EAAG,EAAY,IAAI,CAAC,CAAC,EAAE,EAAY,SAAS,EAAI,GAAA,CAAI,CAAC,IAAI,GAElF,EAAa,SAAS,CAAG;A;A;AAGjB,gBAAA,EAAE,EAAY,IAAI,CAAC,MAAM,EAAE,EAAY,KAAK;A;AAE1B,kCAAA,EAAE,IAAI,CAAC,WAAW,CAAC,EAAY,OAAO,EAAE;AAC9D,YAAA,EAAE,EAAY,MAAM,CAAG,CAAC,QAAQ,EAAE,EAAY,MAAM,CAAC,SAAS,CAAC,CAAG;AACtE,QAAA,CAAC,CACD,EAAa,KAAK,CAAC,OAAO,CAAG,IAC7B,EAAa,KAAK,CAAC,UAAU,CAAG,eAChC,EAAe,WAAW,CAAC,GAE3B,EAAa,gBAAgB,CAAC,QAAS,KACnC,IAAI,CAAC,OAAO,CAAC,EAAY,EAAE,CAC/B,GAEA,sBAAsB,KAClB,EAAa,KAAK,CAAC,OAAO,CAAG,GACjC,GAEI,EAAY,QAAQ,CAAG,GACvB,WAAW,KACP,IAAI,CAAC,OAAO,CAAC,EAAY,EAAE,CAC/B,EAAG,EAAY,QAAQ,CAE/B,CAMA,QAAQ,CAAO,CAAE,CACb,IAAM,EAAQ,SAAS,cAAc,CAAC,GAClC,GAAS,EAAM,UAAU,GACzB,EAAM,KAAK,CAAC,OAAO,CAAG,IACtB,WAAW,KACH,EAAM,UAAU,EAChB,EAAM,MAAM,EAEpB,EAAG,KAEX,CAOA,YAAY,CAAI,CAAE,CACd,IAAM,EAAM,SAAS,aAAa,CAAC,OAEnC,OADA,EAAI,WAAW,CAAG,EACX,EAAI,SAAS,AACxB,CAMA,eAAgB,CACZ,MAAO,uCAAuC,OAAO,CAAC,QAAS,AAAC,IAC5D,IAAM,EAAI,AAAgB,GAAhB,KAAK,MAAM,GAAU,EAE/B,MAAO,AADG,CAAA,AAAM,MAAN,EAAY,EAAK,AAAI,EAAJ,EAAU,CAArC,EACS,QAAQ,CAAC,GACtB,EACJ,CACJ,CAGI,AAAkB,aAAlB,OAAO,QAA0B,OAAO,OAAO,EAC/C,CAAA,OAAO,OAAO,CAAG,KADrB,EAKI,AAAkB,aAAlB,OAAO,QACP,CAAA,OAAO,KAAK,CAAG,KADnB","sources":["<anon>","src/js/toast.js"],"sourcesContent":["/**\n * Toast Notification System\n * A reusable toast notification library for displaying temporary messages\n *\n * Features:\n * - Multiple toast types (success, error, warning, info)\n * - Configurable positioning (top, left, right, center)\n * - Auto-dismiss with custom duration\n * - Manual dismiss with close button\n * - Smooth animations\n * - Multiple toasts support\n *\n * Usage:\n * const toast = new Toast();\n * toast.show({message: 'Hello World!', type: 'success'});\n *\n * Or use static methods:\n * Toast.info('Information message');\n * Toast.success('Operation completed!');\n * Toast.warning('Please check your input');\n * Toast.danger('Something went wrong!');\n */ class Toast {\n    /**\n     * Static method to show a toast\n     * @param {Object} config - Configuration options\n     */ static show(config = {}) {\n        const toast = new Toast();\n        return toast.show(config);\n    }\n    /**\n     * Create and display a toast element\n     * @param {Object} config - Configuration options\n     * @returns {string} Toast ID\n     */ show(config = {}) {\n        const icons = {\n            info: \"\\u2139\\uFE0F\",\n            success: \"\\u2705\",\n            warning: \"\\u26A0\\uFE0F\",\n            danger: \"\\uD83D\\uDEA8\"\n        };\n        const defaultConfig = {\n            type: 'info',\n            position: 'right',\n            duration: 3000\n        };\n        const toastConfig = {\n            ...defaultConfig,\n            ...config,\n            id: this._generateUUID()\n        };\n        if (config.type === null) toastConfig.type = defaultConfig.type;\n        if (config.position === null) toastConfig.position = defaultConfig.position;\n        if (config.duration === null) toastConfig.duration = defaultConfig.duration;\n        toastConfig.icon = toastConfig.fonticon ? `<span class=\"${toastConfig.fonticon}\"></span>` : icons[toastConfig.type] || icons[defaultConfig.type];\n        toastConfig.title = toastConfig.title || toastConfig.type.charAt(0).toUpperCase() + toastConfig.type.slice(1);\n        let toastContainer = document.getElementById(`toast-container-${toastConfig.position}`);\n        if (!toastContainer) {\n            toastContainer = document.createElement('div');\n            toastContainer.id = `toast-container-${toastConfig.position}`;\n            toastContainer.className = `toast-container ${toastConfig.position}`;\n            document.body.appendChild(toastContainer);\n        }\n        const toastElement = document.createElement('div');\n        toastElement.setAttribute('id', toastConfig.id);\n        toastElement.setAttribute('role', 'alert');\n        toastElement.className = `${toastConfig.type} ${toastConfig.className || ''}`.trim();\n        toastElement.innerHTML = `\n            <header>\n                <span class=\"close\"></span>\n                ${toastConfig.icon}&nbsp;${toastConfig.title}\n            </header>\n            <p role=\"alertdialog\">${this._escapeHtml(toastConfig.message)}</p>\n            ${toastConfig.footer ? `<footer>${toastConfig.footer}</footer>` : ''}\n        `;\n        toastElement.style.opacity = '0';\n        toastElement.style.transition = 'opacity 0.2s';\n        toastContainer.appendChild(toastElement);\n        toastElement.addEventListener('click', ()=>{\n            this.dismiss(toastConfig.id);\n        });\n        requestAnimationFrame(()=>{\n            toastElement.style.opacity = '1';\n        });\n        if (toastConfig.duration > 0) setTimeout(()=>{\n            this.dismiss(toastConfig.id);\n        }, toastConfig.duration);\n    }\n    /**\n     * Dismiss a specific toast by ID\n     * @param {string} toastId - The ID of the toast to dismiss\n     */ dismiss(toastId) {\n        const toast = document.getElementById(toastId);\n        if (toast && toast.parentNode) {\n            toast.style.opacity = '0';\n            setTimeout(()=>{\n                if (toast.parentNode) toast.remove();\n            }, 300);\n        }\n    }\n    /**\n     * Escape HTML characters to prevent XSS\n     * @param {string} text - Text to escape\n     * @returns {string} Escaped text\n     */ _escapeHtml(text) {\n        const div = document.createElement('div');\n        div.textContent = text;\n        return div.innerHTML;\n    }\n    /**\n     * generate random UUID\n     * @returns {string} UUID\n     */ _generateUUID() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c)=>{\n            const r = Math.random() * 16 | 0;\n            const v = c === 'x' ? r : r & 0x3 | 0x8;\n            return v.toString(16);\n        });\n    }\n}\n// Export for use in other modules\nif (typeof module !== 'undefined' && module.exports) module.exports = Toast;\n// Make available globally\nif (typeof window !== 'undefined') window.Toast = Toast;\n\n//# sourceMappingURL=groceries.2506ec89.js.map\n","/**\n * Toast Notification System\n * A reusable toast notification library for displaying temporary messages\n *\n * Features:\n * - Multiple toast types (success, error, warning, info)\n * - Configurable positioning (top, left, right, center)\n * - Auto-dismiss with custom duration\n * - Manual dismiss with close button\n * - Smooth animations\n * - Multiple toasts support\n *\n * Usage:\n * const toast = new Toast();\n * toast.show({message: 'Hello World!', type: 'success'});\n *\n * Or use static methods:\n * Toast.info('Information message');\n * Toast.success('Operation completed!');\n * Toast.warning('Please check your input');\n * Toast.danger('Something went wrong!');\n */\n\nclass Toast {\n    /**\n     * Static method to show a toast\n     * @param {Object} config - Configuration options\n     */\n    static show(config = {}) {\n        const toast = new Toast();\n        return toast.show(config);\n    }\n\n    /**\n     * Create and display a toast element\n     * @param {Object} config - Configuration options\n     * @returns {string} Toast ID\n     */\n    show(config = {}) {\n        const icons = { info: '‚ÑπÔ∏è', success: '‚úÖ', warning: '‚ö†Ô∏è', danger: 'üö®' };\n        const defaultConfig = { type: 'info', position: 'right', duration: 3000 };\n        const toastConfig = { ...defaultConfig, ...config, ...{ id: this._generateUUID() } };\n        if (config.type === null) toastConfig.type = defaultConfig.type;\n        if (config.position === null) toastConfig.position = defaultConfig.position;\n        if (config.duration === null) toastConfig.duration = defaultConfig.duration;\n        toastConfig.icon = toastConfig.fonticon ? `<span class=\"${toastConfig.fonticon}\"></span>` : icons[toastConfig.type] || icons[defaultConfig.type];\n        toastConfig.title = toastConfig.title || toastConfig.type.charAt(0).toUpperCase() + toastConfig.type.slice(1);\n\n        let toastContainer = document.getElementById(`toast-container-${toastConfig.position}`);\n        if (!toastContainer) {\n            toastContainer = document.createElement('div');\n            toastContainer.id = `toast-container-${toastConfig.position}`;\n            toastContainer.className = `toast-container ${toastConfig.position}`;\n            document.body.appendChild(toastContainer);\n        }\n\n        const toastElement = document.createElement('div');\n        toastElement.setAttribute('id', toastConfig.id);\n        toastElement.setAttribute('role', 'alert');\n        toastElement.className = `${toastConfig.type} ${toastConfig.className || ''}`.trim();\n\n        toastElement.innerHTML = `\n            <header>\n                <span class=\"close\"></span>\n                ${toastConfig.icon}&nbsp;${toastConfig.title}\n            </header>\n            <p role=\"alertdialog\">${this._escapeHtml(toastConfig.message)}</p>\n            ${toastConfig.footer ? `<footer>${toastConfig.footer}</footer>` : ''}\n        `;\n        toastElement.style.opacity = '0';\n        toastElement.style.transition = 'opacity 0.2s';\n        toastContainer.appendChild(toastElement);\n\n        toastElement.addEventListener('click', () => {\n            this.dismiss(toastConfig.id);\n        });\n\n        requestAnimationFrame(() => {\n            toastElement.style.opacity = '1';\n        });\n\n        if (toastConfig.duration > 0) {\n            setTimeout(() => {\n                this.dismiss(toastConfig.id);\n            }, toastConfig.duration);\n        }\n    }\n\n    /**\n     * Dismiss a specific toast by ID\n     * @param {string} toastId - The ID of the toast to dismiss\n     */\n    dismiss(toastId) {\n        const toast = document.getElementById(toastId);\n        if (toast && toast.parentNode) {\n            toast.style.opacity = '0';\n            setTimeout(() => {\n                if (toast.parentNode) {\n                    toast.remove();\n                }\n            }, 300);\n        }\n    }\n\n    /**\n     * Escape HTML characters to prevent XSS\n     * @param {string} text - Text to escape\n     * @returns {string} Escaped text\n     */\n    _escapeHtml(text) {\n        const div = document.createElement('div');\n        div.textContent = text;\n        return div.innerHTML;\n    }\n\n    /**\n     * generate random UUID\n     * @returns {string} UUID\n     */\n    _generateUUID() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n            const r = Math.random() * 16 | 0;\n            const v = c === 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    }\n}\n\n// Export for use in other modules\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = Toast;\n}\n\n// Make available globally\nif (typeof window !== 'undefined') {\n    window.Toast = Toast;\n}\n"],"names":["Toast","show","config","toast","icons","info","success","warning","danger","defaultConfig","type","position","duration","toastConfig","id","_generateUUID","icon","fonticon","title","charAt","toUpperCase","slice","toastContainer","document","getElementById","createElement","className","body","appendChild","toastElement","setAttribute","trim","innerHTML","_escapeHtml","message","footer","style","opacity","transition","addEventListener","dismiss","requestAnimationFrame","setTimeout","toastId","parentNode","remove","text","div","textContent","replace","c","r","Math","random","v","toString","module","exports","window"],"version":3,"file":"groceries.2506ec89.js.map"}