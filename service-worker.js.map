{"mappings":"ACCA,IAAM,WAAa,kBAEb,SAAW,KAAK,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,uBAAwB,IAClE,YAAc,CAClB,KACA,eACA,6BACA,uCACA,uCACA,8BACA,8BACA,iCACD,CAkED,SAAS,mBAGP,OADA,QAAQ,GAAG,CAAC,6BACL,QAAQ,OAAO,EACxB,CAnEA,KAAK,gBAAgB,CAAC,UAAW,AAAC,IAChC,EAAM,SAAS,CACb,OAAO,IAAI,CAAC,YACT,IAAI,CAAC,AAAC,IACL,QAAQ,GAAG,CAAC,gBACL,EAAM,MAAM,CAAC,eAErB,KAAK,CAAC,AAAC,IACN,QAAQ,KAAK,CAAC,6BAA8B,EAC9C,GAEN,GAGA,KAAK,gBAAgB,CAAC,QAAS,AAAC,IAC9B,IAAM,EAAM,EAAM,OAAO,AAIrB,CAHQ,IAAI,IAAI,EAAI,GAAG,EAGnB,MAAM,GAAK,KAAK,QAAQ,CAAC,MAAM,EACrC,EAAM,WAAW,CACf,OAAO,IAAI,CAAC,YAAY,IAAI,CAAC,MAAO,IAClC,IAAM,EAAS,MAAM,EAAM,KAAK,CAAC,GAC3B,EAAe,MAAM,GACxB,IAAI,CAAC,AAAC,IAED,GAAc,AAAsB,MAAtB,EAAW,MAAM,EAAa,CAAA,AAAoB,UAApB,EAAW,IAAI,EAAgB,AAAoB,WAApB,EAAW,IAAI,AAAK,GACjG,EAAM,GAAG,CAAC,EAAK,EAAW,KAAK,IAE1B,IAER,KAAK,CAAC,IAAM,KAAA,GAGf,OAAO,GAAU,GAAiB,CAAA,AAAoB,aAApB,EAAI,WAAW,CAAkB,EAAM,KAAK,CAAC,gBAAkB,KAAA,CAAA,CACnG,GAGN,GAGA,KAAK,gBAAgB,CAAC,WAAY,AAAC,IACjC,EAAM,SAAS,CACb,OAAO,IAAI,GAAG,IAAI,CAAC,AAAC,GACX,QAAQ,GAAG,CAChB,EAAW,GAAG,CAAC,AAAC,IACd,GAAI,IAAc,WAEhB,OADA,QAAQ,GAAG,CAAC,sBAAuB,GAC5B,OAAO,MAAM,CAAC,EAEzB,KAIR,GAGA,KAAK,gBAAgB,CAAC,OAAQ,AAAC,IACzB,AAAc,oBAAd,EAAM,GAAG,EACX,EAAM,SAAS,CAAC,mBAEpB,GASA,KAAK,gBAAgB,CAAC,OAAQ,AAAC,IAC7B,IAAM,EAAU,CACd,KAAM,EAAM,IAAI,CAAG,EAAM,IAAI,CAAC,IAAI,GAAK,2BACvC,KAAM,uCACN,MAAO,uCACP,QAAS,CAAC,IAAK,GAAI,IAAI,CACvB,KAAM,CACJ,cAAe,KAAK,GAAG,GACvB,WAAY,CACd,CACF,EAEA,EAAM,SAAS,CACb,KAAK,YAAY,CAAC,gBAAgB,CAAC,eAAgB,GAEvD","sources":["<anon>","src/service-worker.js"],"sourcesContent":["// Service Worker for Grocery List PWA\nconst CACHE_NAME = 'grocery-list-v2';\n// Compute base URL within scope (works on GitHub Pages subpaths)\nconst BASE_URL = self.location.pathname.replace(/service-worker\\.js$/i, '');\nconst urlsToCache = [\n    './',\n    './index.html',\n    './favicon/site.webmanifest',\n    './favicon/android-chrome-192x192.png',\n    './favicon/android-chrome-512x512.png',\n    './favicon/favicon-32x32.png',\n    './favicon/favicon-16x16.png',\n    './favicon/apple-touch-icon.png'\n];\n// Install event - cache resources\nself.addEventListener('install', (event)=>{\n    event.waitUntil(caches.open(CACHE_NAME).then((cache)=>{\n        console.log('Opened cache');\n        return cache.addAll(urlsToCache);\n    }).catch((error)=>{\n        console.error('Failed to cache resources:', error);\n    }));\n});\n// Fetch event - stale-while-revalidate for same-origin, with offline fallback\nself.addEventListener('fetch', (event)=>{\n    const req = event.request;\n    const url = new URL(req.url);\n    // Only handle same-origin requests\n    if (url.origin === self.location.origin) event.respondWith(caches.open(CACHE_NAME).then(async (cache)=>{\n        const cached = await cache.match(req);\n        const fetchPromise = fetch(req).then((networkRes)=>{\n            // Cache successful basic responses\n            if (networkRes && networkRes.status === 200 && (networkRes.type === 'basic' || networkRes.type === 'opaque')) cache.put(req, networkRes.clone());\n            return networkRes;\n        }).catch(()=>undefined);\n        // Return cached first, then update in background\n        return cached || fetchPromise || (req.destination === 'document' ? cache.match('./index.html') : undefined);\n    }));\n});\n// Activate event - clean up old caches\nself.addEventListener('activate', (event)=>{\n    event.waitUntil(caches.keys().then((cacheNames)=>{\n        return Promise.all(cacheNames.map((cacheName)=>{\n            if (cacheName !== CACHE_NAME) {\n                console.log('Deleting old cache:', cacheName);\n                return caches.delete(cacheName);\n            }\n        }));\n    }));\n});\n// Background sync for offline data persistence\nself.addEventListener('sync', (event)=>{\n    if (event.tag === 'background-sync') event.waitUntil(doBackgroundSync());\n});\nfunction doBackgroundSync() {\n    // Handle background sync for offline data\n    console.log('Background sync triggered');\n    return Promise.resolve();\n}\n// Push notification support (for future features)\nself.addEventListener('push', (event)=>{\n    const options = {\n        body: event.data ? event.data.text() : 'New grocery list update!',\n        icon: './favicon/android-chrome-192x192.png',\n        badge: './favicon/android-chrome-192x192.png',\n        vibrate: [\n            100,\n            50,\n            100\n        ],\n        data: {\n            dateOfArrival: Date.now(),\n            primaryKey: 1\n        }\n    };\n    event.waitUntil(self.registration.showNotification('Grocery List', options));\n});\n\n//# sourceMappingURL=service-worker.js.map\n","// Service Worker for Grocery List PWA\nconst CACHE_NAME = 'grocery-list-v2';\n// Compute base URL within scope (works on GitHub Pages subpaths)\nconst BASE_URL = self.location.pathname.replace(/service-worker\\.js$/i, '');\nconst urlsToCache = [\n  './',\n  './index.html',\n  './favicon/site.webmanifest',\n  './favicon/android-chrome-192x192.png',\n  './favicon/android-chrome-512x512.png',\n  './favicon/favicon-32x32.png',\n  './favicon/favicon-16x16.png',\n  './favicon/apple-touch-icon.png'\n];\n\n// Install event - cache resources\nself.addEventListener('install', (event) => {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then((cache) => {\n        console.log('Opened cache');\n        return cache.addAll(urlsToCache);\n      })\n      .catch((error) => {\n        console.error('Failed to cache resources:', error);\n      })\n  );\n});\n\n// Fetch event - stale-while-revalidate for same-origin, with offline fallback\nself.addEventListener('fetch', (event) => {\n  const req = event.request;\n  const url = new URL(req.url);\n\n  // Only handle same-origin requests\n  if (url.origin === self.location.origin) {\n    event.respondWith(\n      caches.open(CACHE_NAME).then(async (cache) => {\n        const cached = await cache.match(req);\n        const fetchPromise = fetch(req)\n          .then((networkRes) => {\n            // Cache successful basic responses\n            if (networkRes && networkRes.status === 200 && (networkRes.type === 'basic' || networkRes.type === 'opaque')) {\n              cache.put(req, networkRes.clone());\n            }\n            return networkRes;\n          })\n          .catch(() => undefined);\n\n        // Return cached first, then update in background\n        return cached || fetchPromise || (req.destination === 'document' ? cache.match('./index.html') : undefined);\n      })\n    );\n  }\n});\n\n// Activate event - clean up old caches\nself.addEventListener('activate', (event) => {\n  event.waitUntil(\n    caches.keys().then((cacheNames) => {\n      return Promise.all(\n        cacheNames.map((cacheName) => {\n          if (cacheName !== CACHE_NAME) {\n            console.log('Deleting old cache:', cacheName);\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n});\n\n// Background sync for offline data persistence\nself.addEventListener('sync', (event) => {\n  if (event.tag === 'background-sync') {\n    event.waitUntil(doBackgroundSync());\n  }\n});\n\nfunction doBackgroundSync() {\n  // Handle background sync for offline data\n  console.log('Background sync triggered');\n  return Promise.resolve();\n}\n\n// Push notification support (for future features)\nself.addEventListener('push', (event) => {\n  const options = {\n    body: event.data ? event.data.text() : 'New grocery list update!',\n    icon: './favicon/android-chrome-192x192.png',\n    badge: './favicon/android-chrome-192x192.png',\n    vibrate: [100, 50, 100],\n    data: {\n      dateOfArrival: Date.now(),\n      primaryKey: 1\n    }\n  };\n\n  event.waitUntil(\n    self.registration.showNotification('Grocery List', options)\n  );\n});\n"],"names":["CACHE_NAME","BASE_URL","self","location","pathname","replace","urlsToCache","doBackgroundSync","console","log","Promise","resolve","addEventListener","event","waitUntil","caches","open","then","cache","addAll","catch","error","req","request","url","URL","origin","respondWith","cached","match","fetchPromise","fetch","networkRes","status","type","put","clone","undefined","destination","keys","cacheNames","all","map","cacheName","delete","tag","options","body","data","text","icon","badge","vibrate","dateOfArrival","Date","now","primaryKey","registration","showNotification"],"version":3,"file":"service-worker.js.map"}